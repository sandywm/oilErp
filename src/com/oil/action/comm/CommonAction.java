/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.oil.action.comm;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.oil.factory.AppFactory;
import com.oil.module.Dba02;
import com.oil.service.Dba02Manager;
import com.oil.tools.CommonTools;
import com.oil.util.Constants;
import com.oil.action.base.Transcode;
import com.oil.tools.FileOpration;
import com.oil.tools.CheckImage;
import com.oil.tools.CurrentTime;
import com.oil.util.WebUrl;
import com.oil.page.PageConst;

/** 
 * MyEclipse Struts
 * Creation date: 05-01-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class CommonAction extends DispatchAction {
	
	
	/**
	 * 根据水井号、时间段分页获取水井列表
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getPageSjHglData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		Dba02Manager dm = (Dba02Manager) AppFactory.instance(null).getApp(Constants.WEB_DBA_02_INFO);
		String jh = CommonTools.getFinalStr("jh", request);
		String sDate = CommonTools.getFinalStr("sDate", request);
		String eDate = CommonTools.getFinalStr("eDate", request);
		Integer count = dm.getSjCountByOpt(jh, sDate, eDate);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "暂无记录";
		if(count > 0){
			msg = "success";
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<Dba02> dList = dm.listSjPageInfoByOpt(jh, sDate, eDate, pageNo, pageSize);
			List<Dba02> dList_zsts = dm.listSjInfo(jh, sDate, eDate,false);
			List<Dba02> dList_hgts = dm.listSjInfo(jh, sDate, eDate,true);
			//获取第一条数据的日期
			Integer hgDays = dList_hgts.size();//合格天数
			Integer zsDays = dList_zsts.size();//注水天数
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<Dba02> it = dList.iterator() ; it.hasNext();){
				Dba02 dba = it.next();
				if(dba != null){
					Map<String,Object> map_d = new HashMap<String,Object>();
					map_d.put("jh", dba.getJh());//井号
					map_d.put("db", dba.getDb());//队别
					map_d.put("rq", dba.getRq().substring(0, 10));//日期
					map_d.put("zsf", dba.getZsfs());//方
					map_d.put("scsj", dba.getScsj());//时间
					map_d.put("gxyl", dba.getGxyl());//泵压
					map_d.put("yy", dba.getYy());//油压
					map_d.put("ty", dba.getTy());//套压
					map_d.put("rzsl", dba.getRzsl());//日注
					map_d.put("rpzsl", dba.getRpzsl());//配注
					map_d.put("bz", dba.getBz());//备注
					Double rzsl = Double.parseDouble(String.valueOf(dba.getRzsl()));
					Double rpzsl = Double.parseDouble(String.valueOf(dba.getRpzsl()));
					Double hg = rzsl / rpzsl;
					if(hg >= 0.9 && hg <= 1.1){
						map_d.put("hg", "合格");//
//						hgDays += 1;
					}else{
						map_d.put("hg", "不合格");//
					}
					list_d.add(map_d);
				}
			}
			map.put("data", list_d);
			map.put("count", count);
			map.put("code", 0);
			//统计信息
			map.put("井号", dList.get(0).getJh());
			map.put("注水天数", zsDays);
			map.put("合格天数", hgDays);
			DecimalFormat df = new DecimalFormat("0.00");
			Double hg = hgDays * 100.0 / zsDays;
			map.put("合格率", df.format(hg) + "%");
			if(hg >= 80){
				map.put("结论", "合格");
			}else{
				map.put("结论", "不合格");
			}
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	
	/**
	 * 下载文件
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward downZipFile(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		// TODO Auto-generated method stub
		String zipPath = Transcode.unescape_new1("zipPath", request);
		String zipName = "";
		if(!zipPath.equals("")){
			try{
				//下载文件到客户端
				zipName = zipPath.substring(zipPath.lastIndexOf("\\")+1,zipPath.length());
		        OutputStream fos = null;
		        BufferedOutputStream bos = null;
		        InputStream fis = null;
		        BufferedInputStream bis = null;
		        fis = new FileInputStream(new File(zipPath));
				bis = new BufferedInputStream(fis);
				fos = response.getOutputStream();
				bos = new BufferedOutputStream(fos);
				zipName = URLEncoder.encode(zipName,"UTF-8");
				//这个就就是弹出下载对话框的关键代码
				response.setHeader("Pragma", "No-cache");
				response.setHeader("Cache-Control", "No-cache");
				response.setDateHeader("Expires", 0); 
		        response.setHeader("Content-disposition","attachment;filename=" +zipName);
		        response.setContentType("application/x-download");
		        int bytesRead = 0;
		        byte[] buffer = new byte[8192];
		        while ((bytesRead = bis.read(buffer,0,8192)) != -1) {
		        	fos.write(buffer, 0, bytesRead);
		        }
		        fos.flush();
		        fis.close();
		        bis.close();
		        fos.close();
		        bos.close();
		        FileOpration.deleteFile(zipPath);
			}catch (IOException e){  
//		        e.printStackTrace(); 
		    	System.out.println("用户取消文件下载");
		    } 
		}
		return null;
	}
	
	/**
	 * 上传文件
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward uploadFile(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		String msg = "";
		boolean upFlag = false;
		String fileUrl = "";
		Map<String,Object> map = new HashMap<String,Object>();
		
			if (ServletFileUpload.isMultipartContent(request)){// 判断是否是上传文件
				DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory();// 创建工厂对象
				ServletFileUpload fileUpload = new ServletFileUpload(diskFileItemFactory); // 创建上传对象
				try {
					List<FileItem> filelist = fileUpload.parseRequest(request);
					ListIterator<FileItem> iterator = filelist.listIterator();
					String userPath = WebUrl.DATA_URL_UP_FILE_UPLOAD + "\\";
					String filePre = "";
					while (iterator.hasNext()) {
						FileItem fileItem = iterator.next();// 获取文件对象
						// 处理文件上传
						String filename = fileItem.getName();// 获取名字
						Integer lastIndex = filename.lastIndexOf(".");
						String suffix = filename.substring(lastIndex+1);
						filePre = filename.substring(0, lastIndex);
						filename = filePre + "_" + CurrentTime.getRadomTime() + "." + suffix;
						CheckImage ci = new CheckImage();
						//xls,xlsx
						String checkFileSuffixInfo = ci.getUpFileStuffix(suffix);
						if(checkFileSuffixInfo.equals("file")){//文件限制20M
							upFlag = ci.checkItemSize(fileItem, 20 * 1024 * 1024);
							if(!upFlag){
								msg = "outSize";
							}
						}else{
							msg = "suffixError";
						}
						if(upFlag){
							byte[] data = fileItem.get();// 获取数据
							//没有该文件夹先创建文件夹
				    		File file = new File(userPath);
				    		if(!file.exists()){
				    			file.mkdirs();
				    		}
				    		FileOutputStream fileOutputStream = new FileOutputStream(userPath + "/" + filename);
							fileOutputStream.write(data);// 写入文件
							fileOutputStream.close();// 关闭文件流
							msg = "success";
							fileUrl +=  WebUrl.NEW_DATA_URL_UP_FILE_UPLOAD  + "\\" + filename + ",";
						}
					}
					map.put("code", 0);
					map.put("msg", msg);
					if(!fileUrl.equals("")){
						fileUrl = fileUrl.substring(0, fileUrl.length() - 1);
					}
					map.put("data", fileUrl);
					map.put("fileName", filePre);
					CommonTools.getJsonPkg(map, response);
				}catch (FileUploadException e) {
					e.printStackTrace();
				}catch (FileNotFoundException e) {
					e.printStackTrace();
				}catch (IOException e) {
					e.printStackTrace();
				}
			}
		return null;
	}
	
	/**
	 * 处理注水合格率Excel
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward dealZsExcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		System.out.println("数据分析开始--"+CurrentTime.getCurrentTime());
		Dba02Manager dm = (Dba02Manager) AppFactory.instance(null).getApp(Constants.WEB_DBA_02_INFO);
		String filePath = "d:\\2019-03_sj.xlsx";
		String fileName = "2019-03_sj";
//		String fileName = Transcode.unescape_new("fileName", request);//文件名称
//		String filePath = CommonTools.getFinalStr("filePath", request);
		String absoFilePath = WebUrl.DATA_URL_PRO + "\\" + filePath;
		File f = new File(filePath);
    	InputStream inputStream = new FileInputStream(f);
    	XSSFWorkbook xssfWorkbook = new XSSFWorkbook(inputStream);
    	XSSFSheet sheet = xssfWorkbook.getSheetAt(1);
    	XSSFCellStyle style = xssfWorkbook.createCellStyle();  
        style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
        style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
        XSSFFont font_1 = xssfWorkbook.createFont();    
        font_1.setFontName("宋体");    
        font_1.setFontHeightInPoints((short) 12);//设置字体大小  (备注)
        style.setFont(font_1);
        
        XSSFCellStyle style_pass = xssfWorkbook.createCellStyle();  
        style_pass.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
        style_pass.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
        
        XSSFCellStyle style_no_pass = xssfWorkbook.createCellStyle();  
        style_no_pass.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
        style_no_pass.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
        
        XSSFFont font_pass = xssfWorkbook.createFont();    
        font_pass.setFontName("宋体");    
        font_pass.setFontHeightInPoints((short) 12);//设置字体大小  (备注)
        font_pass.setColor(HSSFColor.GREEN.index);
        
        XSSFFont font_no_pass = xssfWorkbook.createFont();    
        font_no_pass.setFontName("宋体");    
        font_no_pass.setFontHeightInPoints((short) 12);//设置字体大小  (备注)
        font_no_pass.setColor(HSSFColor.RED.index);
        
        style_pass.setFont(font_pass);
        style_no_pass.setFont(font_no_pass);
        
        String specDate = fileName.substring(0, fileName.indexOf("_"));//指定年份月份作业井2019-03
        Integer maxDays = CurrentTime.getMaxDays(specDate);//指定月份的天数
        for (int i = 3; i < sheet.getLastRowNum()+1; i++) {
        	XSSFRow row1 = sheet.getRow(i);
        	String jh = row1.getCell(1).getStringCellValue().replace(" ", "").replace("\t", "");//井号
        	if(jh.equals("")){
        		 break; 
        	}
        	String kjrq = CurrentTime.dateConvertToString(row1.getCell(3).getDateCellValue());//开井日期
        	Integer diffDays = CurrentTime.compareDate(kjrq, specDate+"-"+maxDays);
        	String sDate = "";
        	String eDate = "";
        	if(diffDays > maxDays){//相差天数超过一个月，用指定年份月份的月初和月末日期作为开始和结束日期
        		String[] seDate = CurrentTime.getFirstEndDay(specDate).split(":");
        		sDate = seDate[0];
        		eDate = seDate[1];
        	}else if(diffDays >= 0 && diffDays < maxDays){//用开井日期作为开始，月末日期作为结束
        		sDate = kjrq;
        		eDate = specDate + "-" + maxDays;
        	}else{
        		
        	}
        	if(!sDate.equals("") && !eDate.equals("")){
        		List<Dba02> dList_zs = dm.listSjInfo(jh,sDate,eDate,false);
        		List<Dba02> dList_hg = dm.listSjInfo(jh,sDate,eDate,true);
        		Map<String,Object> map = new HashMap<String,Object>();
        		if(dList_zs.size() > 0){
        			//获取第一条数据的日期
        			Integer hgDays = dList_hg.size();//合格天数
        			Integer zsDays = dList_zs.size();//注水天数
        			DecimalFormat df = new DecimalFormat("0.00");
        			Double hg = hgDays * 100.0 / zsDays;
        			map.put("合格率", df.format(hg) + "%");
        			
        			XSSFCell cell = row1.getCell(4);//注水天数
        			style.setFont(font_1);
        			cell.setCellStyle(style);
        			cell.setCellValue(String.valueOf(zsDays));
        			
        			cell = row1.getCell(5);//合格天数
        			style.setFont(font_1);
        			cell.setCellStyle(style);
        			cell.setCellValue(String.valueOf(hgDays));
        			
        			cell = row1.getCell(6);//合格率
        			style.setFont(font_1);
        			cell.setCellStyle(style);
        			cell.setCellValue(df.format(hg) + "%");
        			
        			cell = row1.getCell(7);//结论
        			if(hg >= 80){
        				style_pass.setFont(font_pass);
        				cell.setCellStyle(style_pass);
        				cell.setCellValue("合格");
        			}else{
        				style_no_pass.setFont(font_no_pass);
        				cell.setCellStyle(style_no_pass);
        				cell.setCellValue("不合格");
        			}
        		}else{
        			continue;
        		}
        	}
        }
        FileOutputStream fout = new FileOutputStream(filePath);//存到服务器
    	xssfWorkbook.write(fout);  
        fout.close(); 
        System.out.println("数据分析结束--"+CurrentTime.getCurrentTime());
        //数据分析完成后王json中自动增加记录
//        CommonTools.addJsonData(fileName, month, CurrentTime.getCurrentTime(), year, absoFilePath);
		return null; 	
	}
	
	
}